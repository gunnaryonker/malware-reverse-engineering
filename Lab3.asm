;This assembly code uses the and function to check the least significant bit to determine if the number was even or not
;int low = 10;
;int high = 50;
;
;int main()
;{
;   for(int i = low; i <= high; i++)
;   {
;       if(i%2 == 0)
;       {
;           printf("%d\n", i);
;       }
;   }
;
;   return 0;
;}

extern printf

section .text
main:
	mov ebx, [high]				; load high into ebx
	
repeat:
	cmp dword [low], ebx		; compare the value of low with the value of high in ebx
	jle L1						; jump to the L1 loop
	jmp end						; jump to end of program when completed

L1:
	mov eax, [low]				; load the value of low into the eax register
	and eax, 1					; bitwise and eax with 1 to check if the least significant bit is 0 (even)
	jnz oddnumber 				; if result is non-zero, skip printing and jump to oddnumber
	push dword [low]			; push the value of low into the stack
	push formatstr				; push the format string onto the stack
	call printf					; call the printf function to print the even number
	add esp, 8					; adjust the stack pointer to remove the function arguments
	
oddnumber:
	add dword [low], 1 			; increment by 1
	jmp repeat					; jump back to the start of the loop

end:
	mov eax, 0					; set the return value of the program to 0
	ret							; return from the main function

section .data
	low dd 10					; decalare the low variable with the value of 10
	high dd 50					; declare the high variable with the value of 50
	formatstr db "%d",13,10,0	; declare the format string for printing an integer with a newline character
